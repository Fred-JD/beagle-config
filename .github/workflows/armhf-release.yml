name: armhf release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  BUILD_TYPE: Release

jobs:
  armhf:
    name: build-armhf
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Deps
      run: |
        sudo dpkg --add-architecture armhf
        sudo apt install gcc-12-arm-linux-gnueabihf g++-12-arm-linux-gnueabihf  libnm-dev:armhf libglib2.0-dev -y
    - name: Build
      id: armhf-artifact-download
      run: |
        cd ${{ github.workspace }}
        mkdir build
        cd build
        cmake ..  -DCMAKE_CXX_COMPILER=$(which arm-linux-gnueabihf-g++-12) \
                  -DCMAKE_C_COMPILER=$(which arm-linux-gnueabihf-gcc-12) \
                  -DARMHF_DEB=ON \
                  -DARCHITECTURE="armhf" \
                  -DGIT_VERSION=$(echo ${{ github.ref }} | grep -o v'[0-9]\+\.[0-9]\+\.[0-9]\+')
        make -j$(nproc)
        make package
        armhf__filename__=$(echo $(ls ${{steps.armhf-artifact-download.outputs.download-path}} | grep ..armhf.deb) | tr -d '\n')
        name__=$(echo ${armhf__filename__%-*} | tr -d '\n')
        version__=$(echo ${{ github.ref }} | grep -o v'[0-9]\+\.[0-9]\+\.[0-9]\+')
        echo "name__=$name__" >> $GITHUB_ENV
        echo "version__=$version__" >> $GITHUB_ENV
        echo "armhf__filename__=$armhf__filename__" >> $GITHUB_ENV
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: ${{ env.version__ }}
          release_name: Release ${{ env.version__ }}
          draft: false
          prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
       # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, 
       # which include a `upload_url`. See this blog post for more info: 
       # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/build/${{ env.armhf__filename__ }}
        asset_name: ${{ env.armhf__filename__ }}
        asset_content_type: application/vnd.debian.binary-package
